% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/s3normalize.R
\name{s3normalize}
\alias{s3normalize}
\title{Convert a possibly non-serializable R object to a serializable R object.}
\usage{
s3normalize(object, read = TRUE)
}
\arguments{
\item{object}{ANY. The R object to normalize. If it has an
\code{"s3mpi.serialize"} attribute consisting of a list with
\code{"read"} and \code{"write"} keys, these arity-1 functions
will be called with the \code{object} prior to reading from and
writing to S3, respectively.}

\item{read}{logical. If \code{TRUE}, the \code{"read"} key of the
\code{"s3mpi.serialize"} attribute, which should be a 1-argument
function, will be invoked on the object. Otherwise, the \code{"write"}
key will be invoked. By default, \code{read} is TRUE.}
}
\description{
R has good foreign function interface bindings to C code. As such,
certain package authors may wish to optimize their code by keeping
their objects in C structures instead of R SEXPs (the standard for
object representation in the R interpreter). This also applies
to bindings to external libraries. The speed advantage can be
substantial, so this is not an uncommon use case. The \code{s3normalize}
helper provides the ability to add an additional "preprocessor"
layer prior to storing an object to S3 that converts a non-serializable
object (such as a list with one of its entries pointing to an
external C structure) to serialize object (such as that list with
its C structure pointer entry replaced by a \code{\link{raw}} vector).
}
\details{
If the object being uploaded with \code{s3store} or downloaded wiht
\code{s3read} has an attribute \code{"s3mpi.serialize"} which must
be a list with keys \code{c("read", "write")}, these keys should
hold functions requiring a single argument which are applied to
the object prior to \emph{reading} from (\code{s3read}) and \emph{writing}
to (\code{s3store}) S3, respectively. This allows s3mpi storage
of not only vanilla R objects but \emph{arbitrary objects in memory}
(whether they are internally represented by a C, Rust, Java, etc. process).
}

