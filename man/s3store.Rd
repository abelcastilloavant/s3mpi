% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s3store.r
\name{s3store}
\alias{s3store}
\alias{s3put}
\title{Store an R object in S3 by key.}
\usage{
s3store(obj, name = NULL, path = s3path(), safe = FALSE, ...)

s3put(..., safe = TRUE)
}
\arguments{
\item{obj}{ANY. An R object to save to S3.}

\item{name}{character. The S3 key to save to. If no key is provided,
the expression passed as \code{obj} will be used.}

\item{path}{character. The S3 prefix, e.g., "s3://yourbucket/some/path/".}

\item{safe}{logical. Whether or not to overwrite existing fails by
default or error if they exist.}

\item{...}{additional arguments to \code{s3mpi:::s3.put}.}
}
\description{
Any type of object that can be serialized as an RDS file
is capable of being retrieved using this interface.
}
\details{
If you wish to store non-vanilla R objects, such as those
containing external pointers to C structures, see
\code{\link{s3normalize}}.
}
\note{
\code{s3put} is equivalent to \code{s3store} except that
   it will fail by default if you try to overwrite an existing key.
}
\examples{
\dontrun{
s3store(c(1,2,3), 'test123')
print(s3read('test123'))
# [1] 1 2 3

s3store(function(x, y) { x + 2 * y }, "myfunc")
stopifnot(s3read("myfunc")(1, 2) == 5) # R can serialize closures!

obj <- 1:5
s3store(obj) # If we do not pass a key the path is inferred from
  # the expression using deparse(substitute(...)).
stopifnot(all.equal(s3read("obj"), 1:5))
}
}
\seealso{
\code{\link{s3read}}
}
